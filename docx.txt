Specifying tests / selecting tests
Pytest supports several ways to run and select tests from the command-line.

Run tests in a module
pytest test_mod.py

Run tests in a directory
pytest testing/

Run tests by keyword expressions
pytest -k "MyClass and not method"

This will run tests which contain names that match the given string expression, which can include Python operators that use filenames, class names and function names as variables. The example above will run TestMyClass.test_something but not TestMyClass.test_method_simple.

Run tests by node ids
Each collected test is assigned a unique nodeid which consist of the module filename followed by specifiers like class names, function names and parameters from parametrization, separated by :: characters.

To run a specific test within a module:
pytest test_mod.py::test_func

Another example specifying a test method in the command line:

pytest test_mod.py::TestClass::test_method

Run tests by marker expressions
pytest -m slow

Will run all tests which are decorated with the @pytest.mark.slow decorator.

For more information see marks.

Run tests from packages
pytest --pyargs pkg.testing

This will import pkg.testing and use its filesystem location to find and run tests from.

Source: https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests

====================================
1- red pahse: function is not defined
2- green phase: function is defined & you can call it (write "test_can_call_fizzbuzz " with None return
3- refactor phase : implenet unittest and remove function that has None return (refactor)

====================================
settup pytest on pycharm
1- seetings > python integrated tools > under "Testing tab" choose default test runner > pytest

================================
pytest -v   --verbose  increase verbosity. show testcase status (PASSED, FAILED)

run tests/test_SOMETHIND.py

=======================
run on specific test
pytest test/test_seha.py::TestBloodType::test_blood_type
=======================
pytest -v -s --> -s show printed in console (without it , you can not see values printed in console

==================
setup xunit priority

1- for setup:

    setup_module > setup_cls > setup_method > setup > run test_SOMETHING based on order of method in file.py

    (setup_method and  setup )   : runs before every unittest


2- for destroy
    teardown > teardown_method > finish all testcase(including setup, excute, destroy) > destroy class > detroy module

===================================


@pytest.fixture
def allowed_files_types():
    return ["png", "jpg", "jpeg"]


means that "allowed_files_types" is an input for test function that it uses pytest.fixture "allowed_files_types"

LOOK:
def test_valid_file_extension(allowed_files_types):
    assert 'png' in allowed_files_types
    assert 'jpg' in allowed_files_types
    assert 'jpeg' in allowed_files_types

"test_valid_file_extension" is using "allowed_files_types" as an input and "allowed_files_types" will run before
exexcute "test_valid_file_extension".
= means run :allowed_files_types" before run "test_valid_file_extension"

=============================
test on just specific one testcase (test_int)
pytest test/test_datatypes.py -v -s -k "test_int"
pytest test/test_datatypes.py -v -s -k "test_int or test_str"

=====================================

search for
1 - python covages tools (coverage)
2 - static code alanysis tools (pylint)

===========================

COVERAGE

>> coverage run app/app.py  (.coverage file will be created)

>>  coverage report

OUTPUT

Name         Stmts   Miss  Cover
--------------------------------
app\app.py       8      6    25%


===============================
>> coverage report -m
-m : means --show-missing

========================
YOU MUST RUN FILE app.py FISRT to take chanages to be covered , then run coverage html
>> coverage html
output : htmlcov > choose index.html